<?php
// $Id$

/**
 * @file
 * Field encrypt - Extension of the Field API to allow encryption of certain text fields - install
 */

/**
 * Implements hook_enable().
 *
 * Set up the cache system to use my modified
 * class which encrypts the cached fields. But
 * do it after
 */
function field_encrypt_enable() {
  // clear the cache of existing data
  cache_clear_all('*', 'cache_field', TRUE);
  // now set up the new class for this bin.
  $old_cache = variable_get('cache_class_cache_field', NULL);
  variable_set('field_encrypt_old_cache', $old_cache);
  variable_set('cache_class_cache_field', 'FieldEncryptDatabaseCache');
}

/**
 * Implements hook_disable().
 *
 * Restore the cache system to what it was
 */
function field_encrypt_disable() {
  // clear the cache of existing data
  cache_clear_all('*', 'cache_field', TRUE);

  // set the old class for this bin, if there was one.
  $old_cache = variable_get('field_encrypt_old_cache', NULL);
  if ($old_cache===NULL) {
    variable_del('cache_class_cache_field');
  }
  else {
    variable_set('cache_class_cache_field', $old_cache);
  }
}

/**
 * Implements hook_requirements().
 */
function field_encrypt_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  switch ($phase) {
    case 'install':
    case 'update':
      $requirements['encryption'] = array(
        'title' => $t('Encryption library'),
      );

      $encrypt_ok = extension_loaded('mcrypt');
      if (!$encrypt_ok) {
        $message = $t('Your version of PHP does not have the mcrypt extension, this module requires that library to function.');
      }

      if (!$encrypt_ok) {
        $requirements['encryption']['value'] = $t('unavailable');
        $requirements['encryption']['severity'] = REQUIREMENT_ERROR;
        $requirements['encryption']['description'] = $message;
      }
      else {
        $requirements['encryption']['value'] = $t('installed');
      }
      break;
  }

  return $requirements;
}
